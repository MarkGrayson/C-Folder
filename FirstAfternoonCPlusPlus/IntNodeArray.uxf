<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>10</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Created by Grayson Palesh
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>0</y>
      <w>410</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : Int
- nodePointer : IntNode *
--
+ getNodeData() : Int
+ getNodePointer() : IntNode *
+ getNodeData(Int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(Int value): init
+ IntNode(Int value, IntNode * nextNode) : constructor

bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>80</x>
      <y>260</y>
      <w>580</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
Data Members
- nodeData : Type
- nodePointer : Node&lt;Type&gt; *
--
Constructors

+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer) : constructor

Methods

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void

bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>260</y>
      <w>720</w>
      <h>380</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members

- font : Node&lt;Type&gt; *
- size : int

--
Constructors
+ Array() : constructor
+Array(int size) : constructor

Advanced 

+ ~Array() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

Methods

+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *

+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index) : Type

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>650</x>
      <y>400</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>230</x>
      <y>20</y>
      <w>490</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- font : IntNode *

--
+IntNodeArray(int size( : constuctor
+ setAtIndex(int index, int value) : void
+ getFromIndex(int index) : int
+ getSize() : int
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>680</y>
      <w>600</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : void
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const: int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>540</y>
      <w>750</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>730.0;140.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>10</x>
      <y>660</y>
      <w>620</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirectionalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *
--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : construct
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous,
BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ getNextNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1500</x>
      <y>0</y>
      <w>540</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add(Type value)
+ remove(int)
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1500</x>
      <y>310</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Queue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1670</x>
      <y>310</y>
      <w>160</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Stack
--

--
add(Type data) : void
remove(int index) : Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1840</x>
      <y>310</y>
      <w>300</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>CircularlyLinkedList
--
- front : BiDirectionalNode *
--
+ add(Type) : void
+ addAtIndex(int index, Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1540</x>
      <y>220</y>
      <w>230</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>210.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>220</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1740</x>
      <y>220</y>
      <w>200</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;90.0</additional_attributes>
  </element>
</diagram>
